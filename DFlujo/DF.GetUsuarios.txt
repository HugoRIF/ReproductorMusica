@startuml
title GET usuarios
start

:parametros_definidos_get($nombre, $contrasenia);
if(nombre: definido \n y contrasenia: definido) then (si)
:validar_parametros_get(nombre,contrasenia);
note left
	nombre: no es vacio
	contrasenia: no es vacio
end note
	if (Parametros Validos?) then (si)

		:query_usuario=SELECT id,nombre, id_tipo_usuario FROM usuario WHERE nombre="nombre" AND contrasenia="contrasenia";
		 note left:Del query se obtiene: id, nombre, id_tipo_usuario\n se crea usuario = [id, nombre, id_tipo_usuario]\nse valida el query en el mismo metodo en el que se hace (modelo) \n si tiene exito manda el arreglo usuario si no manda NULL
		:validar_select(query_usuario);

		if (Query exitoso?) then (si)
			:ver_tipo_usuario(usuario);
			if (Usuario?) then (si)
:id_playlists=SELECT id FROM playlist WHERE id_usuario=usuario[id];
note right: se obtienen los id playlists y se valida el query;
			:validar_select(id_playlists);
			if(Query exitoso?) then (si)
				if(el tamaÃ±o de id_playlists es >0?) then (si)
				:playlists=SELECT playlist.id as "id_playlist", playlist.nombre as "nombre_playlist", cancion.id AS "id_cancion",\n cancion.nombre AS "nombre_cancion", artista.nombre AS "artista_cancion", album.nombre AS "album_cancion", cancion.direccion AS "direccion_cancion"\n FROM playlist JOIN playlist_con_canciones ON playlist.id = playlist_con_canciones.id_playlist JOIN cancion ON cancion.id = playlist_con_canciones.id_cancion\n JOIN artista ON cancion.id_artista = artista.id JOIN album ON cancion.id_album = album.id WHERE playlist.id_usuario = usuario[id];
				note right
					Se espera obtener la informacion de las playlist del usuario logeado de la siguiente forma:
					[ [ id_playlist, nombre_playlist, id_cancion, nombre_cancion, artista_cancion, album_cancion],
					[ id_playlist, nombre_playlist, id_cancion, nombre_cancion, artista_cancion, album_cancion], [...]]

					Se valida en el modelo el query

					Si es valido dicha info se agrega al arreglo usuario 
					(esto se hace en el controlador) y debe quedar:
					usuario = [id, nombre, id_tipo_usuario, id_playlists,
								playlists = [ [ id_playlist, nombre_playlist, id_cancion, nombre_cancion, artista_cancion, album_cancion],
					[ id_playlist, nombre_playlist, id_cancion, nombre_cancion, artista_cancion, album_cancion], [...]]
					  		]
				end note
				:validar_select(playlists);
				if (Query exitoso? ) then (si)
						:crear_respuesta(200, "Usuario y tiene playlist", usuario);
						floating note right
							crear_respuesta() genera el arreglo respuesta=[
							    codigo
							    mensaje
							    data[]
							]
							con los parametros que se le pasan.
						end note
					else (no)
						:crear_respuesta(404, "error en la consulta", usuario);
					endif

				else (no)
					:crear_respuesta(204, "Usuario y no tiene playlist", usuario);
				endif
			else (no)
				:crear_respuesta(404, "error en la consulta", usuario);
			endif 
			else (no)
				:crear_respuesta(200, "Administrador", usuario);
			endif
		else (no)
			:crear_respuesta(404, "Error en la consulta", []);
		endif
	else (no)
		:crear_respuesta(400, "Error en los parametros", []);
	endif
	
else (default)
	:usuarios=SELECT id,nombre, id_tipo_usuario FROM usuario;
	note right
	Obtiene: id, nombre, id_tipo_usuario
    se crea usuarios = [
                 [id, nombre, id_tipo_usuario],
             	 [id, nombre, id_tipo_usuario],
        		...]
    Se valida el query
	end note
	:validar_select(usuarios);
	if (Query exitoso?) then (si)
		:crear_respuesta(200, "Usuarios encontrados", usuarios);
		floating note right
			crear_respuesta() genera el arreglo respuesta=[
			    codigo
			    mensaje
			    data[]
				]
			con los parametros que se le pasan.
		end note
	else (no)
		:crear_respuesta(404, "Error en la consulta", []);
	endif
endif
:mandar_respuesta(respuesta);
stop
@enduml