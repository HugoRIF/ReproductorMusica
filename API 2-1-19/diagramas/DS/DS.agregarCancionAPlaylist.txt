	@startuml
	title **__Agregar cancion(es) a playlist__**
	actor Usuario
	participant "Aplicacion Web" as AW
	participant API
	database BD

	Usuario -> AW: Presiona el boton "Playlist", se manda usuario 

	note left #FFAAAA
		PRECONDICIONES:
		El usuario se encuentra en la vista "Inicio Usuario"
		ver DS.login.
	end note
	note right
		usuario = [ id,
         nombre,
         tipo,
		playlists = [ [ id, nombre, numero_de_canciones, canciones = [ 
                [id, nombre, artista, album, direccion], [ ...]]]
                , [ ...]]
	end note

	activate Usuario #DarkSalmon
	activate AW
	AW -> AW: usuario = usuario
	
	AW -> Usuario: Muestra vista "Playlist"
	note left: Del lado del cliente se cuentan las playlists

	group Tiene al menos una playlist
		
		group evt presionar boton "+"
			Usuario -> AW : Presiona boton "+" de alguna playlist

			AW -> API : GET ... index.php/canciones/
			activate API #DarkSalmon


				API -> BD: Hacer query
				activate BD

				note right
					SELECT a las tablas 'canciones', 'artistas', 'albums'
					Obtener:
					canciones.id
					canciones.nombre
					artistas.nombre
					albums.nombre
					Para cada cancion.
					====
					Se espera obtener el resultado del query de la siguiente forma:
					  result_query = [ 
					  					[id = "canciones.id", 
					  					 nombre = "canciones.nombre",
					  					 artista = "artistas.nombre",
					  					 album = "albums.nombre", ... ],

					  					[id = "canciones.id", 
					  					 nombre = "canciones.nombre",
					  					 artista = "artistas.nombre", 
					  					 album = "albums.nombre", ... ],

					  					[...],[...]]
				end note

				BD -> API: result_query
				note left: canciones = result_query
				BD -> BD: validar_select(canciones)
				deactivate BD

				API -> API: verificar_exito_query(canciones)

				group Query Exitoso
					group #LightBlue metodo crear_respuesta
						API -> API: arreglo_respuesta =[\ncodigo = 200,\nmensaje = "consulta de canciones exitosa",\ndata = canciones]
					end
				else Query Fallo
					group #LightBlue metodo crear_respuesta
						API -> API: arreglo_respuesta =[\ncodigo = 404,\nmensaje = "error en la consulta de las canciones",\ndata = []]
					end
				end

			API -> AW: response(arreglo_respuesta)
			deactivate API
			activate AW

			AW -> AW: validar_codigo(response[codigo])

			group Codigo 200
				AW -> Usuario: Muestra vista "Canciones Disponibles"

				Usuario -> AW: Selecciona cancion(es) y presiona el boton "agregar"
				activate Usuario
				activate AW

				AW -> API: POST .../index.php/playlists
				note left:Se mandan los datos: id_playlist, id_cancion (puede ser uno a mas id's de canciones)
				activate API #DarkSalmon

				API -> API: validar_parametros_post(id_playlist, id_cancion)
				note left: id_playlist : que no sea vacio y >0\nid_cancion: que no sea vacio y >0

				group Parametros Validos
					API -> BD: INSERT 'playlist_con_canciones'
					activate BD
					BD -> API: cancion_agregada
					deactivate BD
					note right: Se insertan id_playlist y id_cancion\n a la tabla 'playlist_con_canciones'\nSe espera que cancion_agregada tenga TRUE o FALSE

					API -> API : verificar_exito_query(cancion_agregada)
					note right
						TRUE sÃ­ se realizo el insert,
						FALSE si no se realizo el insert
					end note
					group Query Exitoso
						group #LightBlue metodo crear_respuesta
							API -> API: arreglo_respuesta =[\ncodigo = 201\nmensaje = "cancion(es) agregadas con exito"\ndata = [id_playlist, id_cancion]
						end

					else Query Falla
						group #LightBlue metodo crear_respuesta
							API -> API: arreglo_respuesta =[\ncodigo = 202\nmensaje = "error al agregar la(s) cancion(es)"\ndata = []]
						end
					end 

				else Parametros Invalidos
					group #LightBlue metodo crear_respuesta
						API -> API: arreglo_respuesta =[\ncodigo = 400\nmensaje = "error en los parametros"\ndata = []]
					end
				end

				API -> AW: response(arreglo_respuesta)

				AW -> AW: validar_codigo(response[codigo])

				group Codigo 201
					AW -> AW: actualizar_info(usuario, response[id_playlist], response[id_cancion])
					note left: Este metodo actualiza la informacion\ndel usuario con las canciones\nagregadas.
				end
				deactivate API
				deactivate AW
			end

				AW -> Usuario: Muestra alert(response[mensaje]) y vista "Inicio Usuario"
				deactivate AW
				deactivate Usuario

		end
	deactivate AW
	deactivate Usuario
	end
	@enduml